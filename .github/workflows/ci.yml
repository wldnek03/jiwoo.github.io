name: Deploy website to GitHub Pages

on:
  # main 브랜치에 푸시될 때 워크플로우를 트리거
  push:
    branches: ["main"]
  # GitHub Actions 탭에서 수동으로 워크플로우 실행 가능
  workflow_dispatch:

# 리포지토리를 클론하고 GitHub Pages에 배포할 권한 부여
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 웹사이트 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 필요 시 빌드 과정 추가 (예시로 React 프로젝트 빌드)
      - name: Install dependencies
        run: npm install
      
      - name: Build project
        run: npm run build

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public  # 배포할 정적 파일들이 위치한 경로 (예시로 'public' 폴더)

  # 로컬 서버 실행 및 테스트 작업
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Start local server
        run: |
          npm install -g serve
          serve -s build -l 3000 &
        env:
          CI: false

      # 서버가 시작될 시간을 충분히 기다림 (20초로 설정)
      - name: Wait for server to start
        run: sleep 20

      # curl을 사용하여 서버가 제대로 실행되었는지 확인 (실패 시 워크플로우 종료)
      - name: Check if server is running
        run: curl --fail http://localhost:3000 || exit 1

      # 추가적인 서버 상태 확인 (선택 사항)
      - name: Display server status
        run: curl http://localhost:3000 